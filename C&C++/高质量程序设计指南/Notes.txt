1.在使用运算符“&&”的表达式中，要尽量把最有可能成为False的子表达式放在“&&”的左边；同样在使用运算符“||”的表达式中，要尽量把最有可能成为“True”的子表达式放在“||”的左边。因为C++/C对逻辑表达式的判断采取“猝死法”：如果“&&”左边的子表达式计算结果为False，则整个表达式就为False，后面的子表达式就没有必要再计算；如果“||”左边的子表达式计算结果为True，则整个表达式就为True，因此后面的子表达式没有必要再计算。这种方法可以提高程序的执行效率。
2.在if/else结构中要尽量把True概率较高的条件判断置于前面，可以提高if/else结构效率。
3.不能在类声明中初始化非静态const数据成员。eg.
  class A
  {
      ...
      const int SIZE = 100;    // 错误，企图在类声明中初始化const数据成员
      int array[SIZE];            // 错误，未知的SIZE
  };
非静态const数据成员的初始化只能在类的构造函数的初始化列表中进行。eg.
  class A
  {
      ...
      A(int size);
      const int SIZE;
  };
  A::A(int size):SIZE(size)
  {
      ...
  }
4.枚举变量不会占用对象的存储空间。
5.在指针参数或引用参数只作为输入时，尽量使用const限制，避免被修改。若作为输出时，添加const限制的话，该参数将失去输出功能。若参数为值传递，因为本身就是使用的变量的copy，即使修改了，原参数也不会变，因此不需要进行const限制。
6、虽然类型名和“*”的组合是一种指针类型，但是编译器解释的时候，“*”是和其后的变量名结合的。例如：
    int*     a,b,c;
编译器会理解为：
    int     *a,b,c;
即只有a是int类型的指针，而b和c仍然是int类型的变量。
7、void*类型的指针不能参与算术运算，只能进行赋值、比较和sizeof()操作。
8、当把“*”用于指针时，就是在提取指针所指向的变量。因此在将“*”用于指针时一定要确保该指针指向一个有效的和合法的变量。不能对void*类型指针使用“*”来取其所指向的变量。
9、引用一旦初始化为指向一个对象，它就不能被改变为对另外一个对象的引用；而指针在任何时候都可以改变为指向另一个对象。给引用赋值并不是改变它和原始对象的绑定关系，例如：
    int a=10, b=100, c=1000;
    int& rInt = a;	// rInt = 10;
    rInt = b;           // rInt = 100, a = 100;
    int *p = &c;	// *p = 1000, c=1000;
    p = &b;		// *p = 100, c=1000;
10、定义带参数的宏时，宏名和左括号之间不能有空格，否则会出错。
    #define TEXT(str) #str
    带参数的宏名和个体应该用括号括起来，例如
    #define SQUERE(x) (x*x)
    尽量不要在宏中使用自增或自减操作，例如
    int i = 5;
    int n = SQUERE(i++);等价于int n = (i++) *(i++)结果为5*6=30而不是5*5=25。
    宏体中换行要使用"\"来进行连接。
    构串操作符"#"在宏中是将宏中的参数转换成字符串，合并操作符"##"是将宏中的参数合并成一个新的标识符。例如：
    #define TEXT(str) #str
    int abc = 100
    char a[] = TEXT(abc); ==> a="100";
    #define MERGE(x, y) x##y
    int n = MERGE(a, bc); ==> n=100;
11、基类的析构函数必须为虚函数，否则其派生类无法析构，会造成内存泄漏。例如：
    class Base
    {
    public:
      virtual ~Base()
        {cout<<"Base::~Base()"<<endl;}
    }
    class Derived : Base
    {
    public:
      virtual ~Derived()
        {cout<<"Derived::~Derived()"<<endl;}
    }
    int main()
    {
      Base *pBase = (Base *)new Derived;
      delete pBase;
      return 0;
    }
    output: Derived::~Derived()
    output: Base::~Base()
    若上例基类Base的析构函数~Base()不是虚函数，则输出为：Base::~Base()，派生类Derived无法析构，造成泄漏，部分平台会出错导致程序崩溃。
12、隐藏和覆盖。规则一：若派生类和基类中，函数名相同，参数列表有差异，不论基类函数是否有virtual，一律为隐藏；
    规则二：若派生类和基类中，函数名和参数列表都相同，但是基类函数没有virtual，则基类函数被隐藏。例如：
    class Base
    {
      virtual float f(float x)
        {cout<<"Base::f(float)"<< x << endl;}
      void getInt(float x)
        {cout<<"Base::getInt(float)"<< x << endl;}
      void h(int x)
        {cout<<"Base::h(int)"<< x << endl;}
    }
    class Derived : Base
    {
      virtual float f(float x)      // 覆盖
        {cout << "Derived::f(float)" << x << endl;}
      void getInt(int x)            // 隐藏
        {cout << "Derived::getInt(int) << x << endl;}
      void h(int x)                 // 隐藏
        {cout << "Derived::h(int)" << x << endl;}
    }
    int main()
    {
      Derived d;
      Base *pBase = &d;
      Derived *pDerived = &d;
      pBase->f(3.14);           // output: Derived::f(float) 3.14
      pDerived->f(3.14);        // output: Derived::f(float) 3.14
      pBase->getInt(3.14);      // output: Base::getInt(float) 3.14
      pDerived->getInt(3.14);   // output: Derived::getInt(int) 3
      pBase->h(3.14);           // output: Base::h(int) 3
      pDerived->h(3.14);        // output: Derived::h(int) 3
      return 0;
    }
13、使用typeid()可以取得类型名。例如：
    char a[] = "100";
    cout << typeid(a).name() << endl;     // output: char[4]
    上例 cout << typeid(d).name() << endl;    // output: Derived
14、内联函数必须是把inline放在函数定义中。例如：
    void Foo(int x, int y);           // 若关键字inline只放在声明中则不是内联函数
    inline void Foo(int x, int y){}   // 若关键字inline在声明和定义都有则也是内联函数
    使用内联函数可以提高运行效率，但是内联函数只能在debug版本中才能调试，Release版本不能调试。
