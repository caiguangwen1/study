1.在使用运算符“&&”的表达式中，要尽量把最有可能成为False的子表达式放在“&&”的左边；同样在使用运算符“||”的表达式中，要尽量把最有可能成为“True”的子表达式放在“||”的左边。因为C++/C对逻辑表达式的判断采取“猝死法”：如果“&&”左边的子表达式计算结果为False，则整个表达式就为False，后面的子表达式就没有必要再计算；如果“||”左边的子表达式计算结果为True，则整个表达式就为True，因此后面的子表达式没有必要再计算。这种方法可以提高程序的执行效率。
2.在if/else结构中要尽量把True概率较高的条件判断置于前面，可以提高if/else结构效率。
3.不能在类声明中初始化非静态const数据成员。eg.
  class A
  {
      ...
      const int SIZE = 100;    // 错误，企图在类声明中初始化const数据成员
      int array[SIZE];            // 错误，未知的SIZE
  };
非静态const数据成员的初始化只能在类的构造函数的初始化列表中进行。eg.
  class A
  {
      ...
      A(int size);
      const int SIZE;
  };
  A::A(int size):SIZE(size)
  {
      ...
  }
4.枚举变量不会占用对象的存储空间。
5.在指针参数或引用参数只作为输入时，尽量使用const限制，避免被修改。若作为输出时，添加const限制的话，该参数将失去输出功能。若参数为值传递，因为本身就是使用的变量的copy，即使修改了，原参数也不会变，因此不需要进行const限制。